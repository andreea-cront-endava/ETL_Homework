--crearea utiliztorului care sa testeze sistemul
CREATE USER davaxx_viewer IDENTIFIED BY "Timesheet2025!"
    DEFAULT TABLESPACE users
    TEMPORARY TABLESPACE temp;

GRANT
    CREATE SESSION
TO davax_viewer;

------------------------------------------------TARGET TABLES

-------CREARE TABEL LOCATION

CREATE TABLE location (
    location_id VARCHAR2(20) PRIMARY KEY,
    city        VARCHAR2(100) NOT NULL
);
    
-------CREARE TABEL MANAGER

CREATE TABLE manager (
    manager_id  NUMBER
        GENERATED ALWAYS AS IDENTITY
    PRIMARY KEY,
    first_name  VARCHAR2(100) NOT NULL,
    last_name   VARCHAR2(100) NOT NULL,
    email       VARCHAR2(100) NOT NULL,
    location_id VARCHAR2(3)
        REFERENCES location ( location_id )
);

-------CREARE TABEL EMPLOYEES

CREATE TABLE employees (
    employee_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    first_name  VARCHAR2(100),
    last_name   VARCHAR2(100),
    email       VARCHAR2(100),
    is_active   CHAR(1),
    hired_date  DATE,
    manager_id  NUMBER,
    location_id VARCHAR2(3),
    emp_code    VARCHAR2(10)
);
    
    ALTER TABLE employees MODIFY employee_id GENERATED BY DEFAULT ON NULL AS IDENTITY;

-------CREARE TABEL EMPLOYEES_ARCHIVE 

--EMPLOYEE_ARCHIVE ESTE UN TABEL CARE CONTINE DATE DESCRIPTIVE DESPRE PARCURSUL ANGAJATULUI IN COMPANIE

CREATE TABLE employees_archive (
    attribute_id      NUMBER
        GENERATED ALWAYS AS IDENTITY
    PRIMARY KEY,
    employee_id       NUMBER NOT NULL
        REFERENCES employees ( employee_id ),
    discipline        VARCHAR2(100) NOT NULL,
    job_position      VARCHAR2(100) NOT NULL,
    manager_id        NUMBER
        REFERENCES manager ( manager_id ),
    date_from         DATE NOT NULL,
    date_to           DATE,
    modification_date DATE DEFAULT sysdate
);
    
 -------CREARE TABEL DAILY_ACTIVITY

CREATE TABLE daily_activity (
    activity_id          NUMBER
        GENERATED ALWAYS AS IDENTITY
    PRIMARY KEY,
    employee_id          NUMBER NOT NULL
        REFERENCES employees ( employee_id ),
    activity_date        DATE NOT NULL,
    activity_type        VARCHAR2(50) NOT NULL,
    activity_description VARCHAR2(500) NOT NULL,
    work_hours           NUMBER(4, 2),
    overtime_hours       NUMBER(4, 2),
    training_attendance  CHAR(1) DEFAULT 'N' CHECK ( training_attendance IN ( 'Y', 'N' ) ),
    training_duration    NUMBER(6),
    absence_type         VARCHAR2(50),
    CONSTRAINT chk_activity_type
        CHECK ( activity_type IN ( 'Work', 'Training', 'Absence', 'Exam' ) ),
    CONSTRAINT chk_absence_type
        CHECK ( absence_type IN ( 'Annual leave', 'Special leave', 'Medical leave', 'Unpaid leave' ) ),
    CONSTRAINT chk_work_logic
        CHECK ( ( activity_type = 'Work'
                  AND work_hours IS NOT NULL )
                OR activity_type != 'Work' ),
    CONSTRAINT chk_training
        CHECK ( ( activity_type = 'Training'
                  AND training_attendance IN ( 'Y', 'N' )
                  AND ( ( training_attendance = 'Y'
                          AND training_duration > 0 )
                        OR ( training_attendance = 'N'
                             AND training_duration = 0 ) ) )
                OR activity_type != 'Training' ),
    CONSTRAINT chk_absence
        CHECK ( ( activity_type = 'Absence'
                  AND absence_type IS NOT NULL
                  AND work_hours = 0
                  AND overtime_hours = 0
                  AND training_attendance = 'N'
                  AND training_duration = 0 )
                OR activity_type != 'Absence' )
);
    
 ---------------------------------POPULARE TABELE 
 
 ----------TAB LOCATION
INSERT INTO location (
    location_id,
    city
) VALUES ( 'BHD',
           'Bucuresti' );

INSERT INTO location (
    location_id,
    city
) VALUES ( 'ISD',
           'Iasi' );

INSERT INTO location (
    location_id,
    city
) VALUES ( 'SV',
           'Suceava' );

INSERT INTO location (
    location_id,
    city
) VALUES ( 'CLD',
           'Cluj-Napoca' );

INSERT INTO location (
    location_id,
    city
) VALUES ( 'BVD',
           'Brasov' );

INSERT INTO location (
    location_id,
    city
) VALUES ( 'TMD',
           'Timisoara' );

INSERT INTO location (
    location_id,
    city
) VALUES ( 'PTD',
           'Pitesti' );

INSERT INTO location (
    location_id,
    city
) VALUES ( 'TGD',
           'Targu Mures' );

 ----------TAB MANAGER
-- Manager 1: Bogdan Darabaneanu - Iasi
INSERT INTO manager (
    first_name,
    last_name,
    email,
    location_id
)
    SELECT
        'Bogdan',
        'Darabaneanu',
        'Bogdan.Darabaneanu@endava.com',
        location_id
    FROM
        location
    WHERE
        city = 'Iasi';

-- Manager 2: Mariana Apastinei - Suceava
INSERT INTO manager (
    first_name,
    last_name,
    email,
    location_id
)
    SELECT
        'Mariana',
        'Apastinei',
        'Mariana.Apastinei@endava.com',
        location_id
    FROM
        location
    WHERE
        city = 'Suceava';

-- Manager 3: Oana Macean - Timisoara
INSERT INTO manager (
    first_name,
    last_name,
    email,
    location_id
)
    SELECT
        'Oana',
        'Macean',
        'Oana.Macean@endava.com',
        location_id
    FROM
        location
    WHERE
        city = 'Timisoara';

-- Manager 4: Carmina Bernat - Targu Mures
INSERT INTO manager (
    first_name,
    last_name,
    email,
    location_id
)
    SELECT
        'Carmina',
        'Bernat',
        'Carmina.Bernat@endava.com',
        location_id
    FROM
        location
    WHERE
        city = 'Targu Mures';

-- Manager 5: Adrian Matean - Cluj-Napoca
INSERT INTO manager (
    first_name,
    last_name,
    email,
    location_id
)
    SELECT
        'Adrian',
        'Matean',
        'Adrian.Matean@endava.com',
        location_id
    FROM
        location
    WHERE
        city = 'Cluj-Napoca';

-- Manager 6: Andreea Cojocaru - Bucuresti
INSERT INTO manager (
    first_name,
    last_name,
    email,
    location_id
)
    SELECT
        'Andreea',
        'Cojocaru',
        'Andreea.Cojocaru@endava.com',
        location_id
    FROM
        location
    WHERE
        city = 'Bucuresti';

-- Manager 7: Ciprian Dogaru - Pitesti
INSERT INTO manager (
    first_name,
    last_name,
    email,
    location_id
)
    SELECT
        'Ciprian',
        'Dogaru',
        'Ciprian.Dogaru@endava.com',
        location_id
    FROM
        location
    WHERE
        city = 'Pitesti';

-- Manager 8: Petrisor Dima - Brasov
INSERT INTO manager (
    first_name,
    last_name,
    email,
    location_id
)
    SELECT
        'Petrisor',
        'Dima',
        'Petrisor.Dima@endava.com',
        location_id
    FROM
        location
    WHERE
        city = 'Brasov';

 ----------TAB EMPLOYEES

--pentru tabelul employees datele au fost importate manual din fisierul Book1.csv, insa tabelul 
--necesita ca si coloanele de manager_id si location_id sa fie legate de tabelele corespunzatoare

UPDATE employees e
SET
    manager_id = (
        SELECT
            m.manager_id
        FROM
            manager m
        WHERE
            m.location_id = e.location_id
    )
WHERE
    e.location_id IN (
        SELECT
            location_id
        FROM
            location
    );

 ----------TAB EMPLOYEES_ARCHIVE

INSERT INTO employees_archive (
    employee_id,
    discipline,
    job_position,
    manager_id,
    date_from,
    date_to,
    modification_date
)
    SELECT
        e.employee_id,
        'Data'            AS discipline,
        CASE --distribuire random a job position de "Junior Data Engineer" si "Data Engineer"
            WHEN MOD(e.employee_id, 2) = 0 THEN
                'Junior Data Engineer'
            ELSE
                'Data Engineer'
        END               AS job_position,
        e.manager_id,
        DATE '2025-05-26' AS date_from,
        NULL              AS date_to,
        sysdate           AS modification_date
    FROM
        employees e
    WHERE
        e.is_active = 'Y';

INSERT INTO daily_activity (
    employee_id,
    activity_date,
    activity_type,
    activity_description,
    work_hours,
    overtime_hours,
    training_attendance,
    training_duration,
    absence_type
)
SELECT
    e.employee_id,                          
    TRUNC(a.start_time),                   
    'Training',                         
    'Attended session: ' || a.session_name,
    0,                                   
    0,                                    
    'Y',                                  
    a.duration_min,                       
    NULL                                 
FROM
    sources.attendance a
JOIN
    employees e ON LOWER(e.email) = LOWER(a.emp_email)
WHERE
    a.dataset_label = 'WEEK_29';           -- alegem doar sesiunea doritÄƒ


SELECT
    e.employee_id,
    TRUNC(a.start_time),
    'Training' AS activity_type,
    'Attended session: ' || a.session_name AS description,
    a.duration_min
FROM
    sources.attendance a
JOIN
    employees e ON LOWER(e.email) = LOWER(a.emp_email)
WHERE
    a.dataset_label = 'WEEK_29';


INSERT INTO daily_activity (
    employee_id,
    activity_date,
    activity_type,
    activity_description,
    work_hours,
    overtime_hours,
    training_attendance,
    training_duration,
    absence_type
)
SELECT
    e.employee_id,
    TO_DATE(REGEXP_SUBSTR(ac.session_name, '\d{4}-\d{2}-\d{2}'), 'YYYY-MM-DD'),
    'Training',
    'Attended session: ' || ac.session_name,
    0,
    0,
    'Y',
    ac.total_minutes,
    NULL
FROM
    sources.attendance_clean ac
JOIN
    employees e ON LOWER(e.email) = LOWER(ac.emp_email);


--verifica ca toti participantii sunt acoperiti
SELECT COUNT(DISTINCT employee_id) AS nr_angajati
FROM daily_activity
WHERE activity_type = 'Training';



--integrare timesheet -> daily_activity

INSERT INTO daily_activity (
    employee_id,
    activity_date,
    activity_type,
    activity_description,
    work_hours,
    overtime_hours,
    training_attendance,
    training_duration,
    absence_type
)
SELECT
    e.employee_id,
    t.work_date,
    'Work',
    'Worked on project ' || t.project_code,
    t.hours_worked,
    NULL,
    'N',
    0,
    NULL
FROM
    sources.timesheet t
JOIN
    employees e ON LOWER(e.email) = LOWER(t.emp_id)
WHERE
    t.dataset_label IN (
        'WEEK_29', 'WEEK_30' -- Ã®nlocuieÈ™te cu etichetele tale reale
    );

INSERT INTO daily_activity (
    employee_id,
    activity_date,
    activity_type,
    activity_description,
    work_hours,
    overtime_hours,
    training_attendance,
    training_duration,
    absence_type
)
SELECT
    d.employee_id,
    d.activity_date,
    'Work',
    'Autogenerated work record due to training only',
    8,
    NULL,
    'N',
    0,
    NULL
FROM daily_activity d
WHERE d.activity_type = 'Training'
  AND NOT EXISTS (
      SELECT 1
      FROM daily_activity dw
      WHERE dw.employee_id = d.employee_id
        AND dw.activity_date = d.activity_date
        AND dw.activity_type = 'Work'
  );

-- insereazÄƒ doar dacÄƒ structura e compatibilÄƒ
INSERT INTO employees (
    employee_id, first_name, last_name, email,
    is_active, hired_date, manager_id, location_id
)
SELECT
    employee_id, first_name, last_name, email,
    is_active, hired_date, manager_id, location_id
FROM target_schema.employees;


-- integrare date din sesiunile de training in daily_activity
INSERT INTO daily_activity (
    employee_id,
    activity_date,
    activity_type,
    activity_description,
    work_hours,
    overtime_hours,
    training_attendance,
    training_duration,
    absence_type
)
SELECT
    e.employee_id,
    TO_DATE(REGEXP_SUBSTR(ac.session_name, '\d{4}-\d{2}-\d{2}'), 'YYYY-MM-DD'),
    'Training',
    'Attended session: ' || ac.session_name,
    0,
    0,
    'Y',
    ac.total_minutes,
    NULL
FROM
    sources.attendance_clean ac
JOIN
    employees e ON LOWER(e.email) = LOWER(ac.emp_email);


-- cati participanti au fost la training
SELECT activity_date, COUNT(DISTINCT employee_id) AS nr_angajati_unici
FROM daily_activity
WHERE activity_type = 'Training'
GROUP BY activity_date
ORDER BY activity_date;


--cati participanti au fost in fiecare sesiune de training ETL
SELECT
    activity_date,
    activity_description,
    COUNT(*) AS nr_participari
FROM
    daily_activity
WHERE
    activity_type = 'Training'
GROUP BY
    activity_date,
    activity_description
ORDER BY
    activity_date, activity_description;

--integrare date din absences in daily_activity
INSERT INTO daily_activity (
    employee_id,
    activity_date,
    activity_type,
    activity_description,
    work_hours,
    overtime_hours,
    training_attendance,
    training_duration,
    absence_type
)
SELECT
    e.employee_id,
    a.start_date + level - 1 AS activity_date,
    'Absence',
    'Absent - ' || a.absence_type,
    0,
    0,
    'N',
    0,
    a.absence_type
FROM
    sources.absences a
JOIN
    employees e ON LOWER(e.emp_code) = LOWER(a.emp_id)
CONNECT BY
    PRIOR a.emp_id = a.emp_id
    AND PRIOR a.start_date = a.start_date
    AND level <= a.end_date - a.start_date + 1
    AND dbms_random.value IS NOT NULL  -- workaround pentru CONNECT BY fÄƒrÄƒ loop infinit



UPDATE absences a
SET emp_id = (
    SELECT e.emp_code
    FROM employees e
    WHERE
        REPLACE(LOWER(e.first_name), ' ', '') || REPLACE(LOWER(e.last_name), ' ', '') =
        REPLACE(LOWER(SUBSTR(a.emp_name, INSTR(a.emp_name, ',') + 1)), ' ', '') ||
        REPLACE(LOWER(SUBSTR(a.emp_name, 1, INSTR(a.emp_name, ',') - 1)), ' ', '')
)
WHERE emp_id IS NULL;

-- Pentru EXAM_ABSENCES
UPDATE source.exam_absence a
SET emp_id = (
    SELECT e.emp_code
    FROM employees e
    WHERE
        REPLACE(LOWER(e.first_name), ' ', '') || REPLACE(LOWER(e.last_name), ' ', '') =
        REPLACE(LOWER(SUBSTR(a.emp_name, INSTR(a.emp_name, ',') + 1)), ' ', '') ||
        REPLACE(LOWER(SUBSTR(a.emp_name, 1, INSTR(a.emp_name, ',') - 1)), ' ', '')
)
WHERE emp_id IS NULL;
SELECT USER FROM dual;



INSERT INTO daily_activity (
    employee_id,
    activity_date,
    activity_type,
    activity_description,
    work_hours,
    overtime_hours,
    training_attendance,
    training_duration,
    absence_type
)
SELECT
    e.employee_id,
    a.start_date + LEVEL - 1 AS activity_date,
    'Absence',
    'Absence: ' || a.absence_type,
    0,
    0,
    'N',
    0,
    a.absence_type
FROM
    sources.absences a
JOIN
    employees e ON LOWER(e.emp_code) = LOWER(a.emp_id)
CONNECT BY LEVEL <= (a.end_date - a.start_date + 1)
AND PRIOR a.emp_id = a.emp_id
AND PRIOR DBMS_RANDOM.VALUE IS NOT NULL;


INSERT INTO daily_activity (
    employee_id,
    activity_date,
    activity_type,
    activity_description,
    work_hours,
    overtime_hours,
    training_attendance,
    training_duration,
    absence_type
)
SELECT
    e.employee_id,
    a.start_date,
    'Absence',
    'Absence: ' || a.absence_type,
    0,
    0,
    'N',
    0,
    CASE
      WHEN LOWER(a.absence_type) LIKE '%annual%' THEN 'Annual leave'
      WHEN LOWER(a.absence_type) LIKE '%special%' THEN 'Special leave'
      WHEN LOWER(a.absence_type) LIKE '%medical%' THEN 'Medical leave'
      WHEN LOWER(a.absence_type) LIKE '%unpaid%' THEN 'Unpaid leave'
    END
FROM
    sources.absences a
JOIN
    employees e
    ON LOWER(TRIM(a.emp_name)) = LOWER(TRIM(e.first_name || ' ' || e.last_name));



-- Inserare zile de examen
INSERT INTO daily_activity (
    employee_id, activity_date, activity_type, activity_description,
    work_hours, overtime_hours, training_attendance, training_duration, absence_type
)
SELECT
    e.employee_id,
    ea.exam_date,
    'Exam',
    'Absent for exam: ' || ea.absence_reason,
    0, 0, 'N', 0, NULL
FROM sources.exam_absence ea
JOIN employees e ON LOWER(ea.emp_id) = LOWER(e.emp_code)
WHERE ea.exam_date IS NOT NULL;


--creare view curat cu durata totala per angajat per zi
CREATE OR REPLACE VIEW sources.training_per_day_clean AS
SELECT
    emp_email,
    TRUNC(TO_DATE(REGEXP_SUBSTR(session_name, '\d{4}-\d{2}-\d{2}'), 'YYYY-MM-DD')) AS training_date,
    SUM(total_minutes) AS total_minutes
FROM sources.attendance_clean
GROUP BY emp_email, TRUNC(TO_DATE(REGEXP_SUBSTR(session_name, '\d{4}-\d{2}-\d{2}'), 'YYYY-MM-DD'));


INSERT INTO daily_activity (
    employee_id,
    activity_date,
    activity_type,
    activity_description,
    work_hours,
    overtime_hours,
    training_attendance,
    training_duration,
    absence_type
)
SELECT
    e.employee_id,
    t.training_date,
    'Training',
    'Training day',
    0,
    0,
    'Y',
    t.total_minutes,
    NULL
FROM sources.training_per_day_clean t
JOIN employees e ON LOWER(e.email) = LOWER(t.emp_email);

SELECT
    activity_date,
    COUNT(DISTINCT employee_id) AS numar_angajati_unici,
    SUM(training_duration) AS total_training_minute
FROM daily_activity
WHERE activity_type = 'Training'
GROUP BY activity_date
ORDER BY activity_date;


--  Exemple de rapoarte finale
-- Total participanÈ›i la training per zi
SELECT
    activity_date,
    COUNT(DISTINCT employee_id) AS numar_angajati_unici,
    SUM(training_duration) AS total_training_minute
FROM daily_activity
WHERE activity_type = 'Training'
GROUP BY activity_date
ORDER BY activity_date;

-- Total minute È™i ore de training per angajat per sÄƒptÄƒmÃ¢nÄƒ
SELECT
    TO_CHAR(d.activity_date, 'YYYY-IW') AS saptamana,
    e.first_name || ' ' || e.last_name AS nume_angajat,
    SUM(d.training_duration) AS total_minute_training,
    ROUND(SUM(d.training_duration) / 60, 2) AS total_ore_training
FROM daily_activity d
JOIN employees e ON e.employee_id = d.employee_id
WHERE d.activity_type = 'Training'
GROUP BY TO_CHAR(d.activity_date, 'YYYY-IW'), e.first_name, e.last_name
ORDER BY saptamana, total_minute_training DESC;

-- Activitatea angajaÈ›ilor Ã®ntr-o zi anume
SELECT
    e.first_name || ' ' || e.last_name AS angajat,
    d.activity_date,
    d.activity_type,
    d.activity_description,
    d.training_duration,
    d.absence_type
FROM daily_activity d
JOIN employees e ON e.employee_id = d.employee_id
WHERE d.activity_date = TO_DATE('2025-06-25', 'YYYY-MM-DD')
ORDER BY angajat;

-- raport saptamanal cu total ore lucrate si training
SELECT
  e.first_name || ' ' || e.last_name AS employee,
  TO_CHAR(d.activity_date, 'YYYY-IW') AS week,
  SUM(NVL(d.work_hours, 0)) AS total_work,
  SUM(NVL(d.training_duration, 0)) AS total_training
FROM daily_activity d
JOIN employees e ON e.employee_id = d.employee_id
GROUP BY e.first_name, e.last_name, TO_CHAR(d.activity_date, 'YYYY-IW')
ORDER BY week, employee;

select * from daily_activity;